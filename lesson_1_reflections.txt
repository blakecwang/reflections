How did viewing a diff between two versions of a file help you see
the bug that was introduced?

It pointed to places where the two files were different in some way
which narrowed the areas that could possibly contain an error.




How could having easy access to the entire history of a file make you
a more efficient programmer in the long term?

Looking back to see what was working in pervious versions can clue you
in to what might not be working in a current version.




What do you think are the pros and cons of manually choosing when to]
create a commit, like you do in Git, vs having versions automatically
saved, like Google docs does?

The main pro is that commits occur in logical places and at good stopping
points (control). The con is that you can forget to commit or commit too much
and this could make the Git log harder to read.




Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

Some programs are designed to accommodate interdependent file structures while others
are designed with completely independent files.




Now that you have your workspace set up, what do you want to try using Git for?

I want to build a website using interdependent HTML and CSS files and use Git to
keep track of previous versions of both simultaneously.




How might using version control make you more confident to make changes that could
break something?

knowing that you have pervious versions to fall back on in case you break something
is invaluable with respect to the peace of mind it brings when making big changes.




How can you use the commands git log and git diff to view the history of files?

Git log shows all the different commits then compare two commits by using git diff.




What happens when you initialize a repository? Why do you need to do it?

A .git folder is created. This is probably going to be the folder in which all the
metadata about previous versions is stored.



Some useful commands to remember:

cd               change directory
cd ~             change to home directory
mkdir            make directory
subl             launch Sublime Text
subl filename    open fiile with Sublime Text
pwd              print working directory
ls               lists files in working directory
ls-a             lists all files (hidden or not) in working directory
git log          displays Git log
git log --stat   displays Git log with some statistics
q                stop viewing Git log output
git clone        clones a whole repository
git checkout     temporarily resets all files in repository back to selected commit
mv filepath filename    moves file to current directory and gives it filename
git init         initializes a new repository
git status       shows which files have changed since the last commit
